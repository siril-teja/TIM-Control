% function [Optimized_DesignVars,Info] = try1(DesignVars)
% %RESPONSEOPTIMIZATION_ROM_DRAFT3
% %
% % Solve a design optimization problem for the ROM_draft3 model.
% %
% % The function returns optimized parameter values, Optimized_DesignVars,
% % and optimization termination information, Info.
% %
% % The input argument, DesignVars, defines the model parameters to optimize,
% % if omitted the parameters specified in the function body are optimized.
% %
% % Modify the function to include or exclude new design requirements, or
% % to change the optimization options.
% %
% % Auto-generated by SDOTOOL on 24-Feb-2025 23:09:33.
% %
% 
% %% Open the model.
% open_system('ROM_draft3')
% 
% %% Specify Design Variables
% %
% % Specify model parameters as design variables to optimize.
% if nargin < 1 || isempty(DesignVars)
%     DesignVars = sdo.getParameterFromModel('ROM_draft3',{'Left_EO','Left_IO','Left_LongThor','Left_MF','Left_Psoas','Left_RA'});
%     DesignVars(1).Minimum = 0;
%     DesignVars(1).Maximum = 250;
%     DesignVars(1).Scale = 1;
%     DesignVars(2).Minimum = 0;
%     DesignVars(2).Maximum = 250;
%     DesignVars(2).Scale = 1;
%     DesignVars(3).Minimum = 0;
%     DesignVars(3).Maximum = 250;
%     DesignVars(3).Scale = 1;
%     DesignVars(4).Minimum = 0;
%     DesignVars(4).Maximum = 250;
%     DesignVars(4).Scale = 1;
%     DesignVars(5).Minimum = 0;
%     DesignVars(5).Maximum = 250;
%     DesignVars(5).Scale = 1;
%     DesignVars(6).Minimum = 0;
%     DesignVars(6).Maximum = 250;
% end
% 
% %% Specify Design Requirements
% %
% % Specify design requirements to satisfy during optimization.
% Requirements = struct;
% bnds = getbounds('ROM_draft3/Muscle Forces/Minimize SumofCubeofForces');
% Requirements.SignalTracking = bnds{1};
% bnds = getbounds('ROM_draft3/Plumbline - Check X Bounds');
% bnds = [bnds{:}];
% Requirements.SignalBound = bnds(1);
% Requirements.SignalBound_1 = bnds(2);
% bnds = getbounds('ROM_draft3/Plumbline - Check Y Bounds');
% bnds = [bnds{:}];
% Requirements.SignalBound_2 = bnds(1);
% Requirements.SignalBound_3 = bnds(2);
% 
% % Prevent check block assertions during optimization.
% CheckBlockStatus = sdo.setCheckBlockEnabled('ROM_draft3','off');
% 
% %% Simulation Definition
% %
% % Specify model signals to log during model simulation.
% Simulator = sdo.SimulationTest('ROM_draft3');
% 
% Sig_Info = Simulink.SimulationData.SignalLoggingInfo;
% Sig_Info.BlockPath = 'ROM_draft3/Muscle Forces/Minimize SumofCubeofForces/u';
% Sig_Info.LoggingInfo.LoggingName = 'Sig';
% Sig_Info.LoggingInfo.NameMode = 1;
% 
% Sig_1_Info = Simulink.SimulationData.SignalLoggingInfo;
% Sig_1_Info.BlockPath = 'ROM_draft3/Plumbline - Check X Bounds/u';
% Sig_1_Info.LoggingInfo.LoggingName = 'Sig_1';
% Sig_1_Info.LoggingInfo.NameMode = 1;
% 
% Sig_2_Info = Simulink.SimulationData.SignalLoggingInfo;
% Sig_2_Info.BlockPath = 'ROM_draft3/Plumbline - Check Y Bounds/u';
% Sig_2_Info.LoggingInfo.LoggingName = 'Sig_2';
% Sig_2_Info.LoggingInfo.NameMode = 1;
% 
% Simulator.LoggingInfo.Signals = [...
%     Sig_Info; ...
%     Sig_1_Info; ...
%     Sig_2_Info];
% 
% %%
% % Configure the simulator for fast restart
% Simulator = fastRestart(Simulator,'on');
% 
% %% Create Optimization Objective Function
% %
% % Create a function that is called at each optimization iteration
% % to evaluate the design requirements.
% %
% % Use an anonymous function with one argument that calls ROM_draft3_optFcn.
% optimfcn = @(P) ROM_draft3_optFcn(P,Simulator,Requirements);
% 
% %% Optimization Options
% %
% % Specify optimization options.
% Options = sdo.OptimizeOptions;
% Options.MethodOptions.Algorithm = 'active-set';
% Options.OptimizedModel = Simulator;
% 
% %% Optimize the Design
% %
% % Call sdo.optimize with the objective function handle, parameters to
% % optimize, and options.
% [Optimized_DesignVars,Info] = sdo.optimize(optimfcn,DesignVars,Options);
% 
% %%
% % Restore the simulator fast restart settings
% Simulator = fastRestart(Simulator,'off');
% 
% % Restore check block assertions.
% sdo.setCheckBlockEnabled('ROM_draft3',CheckBlockStatus);
% 
% %% Update Model
% %
% % Update the model with the optimized parameter values.
% sdo.setValueInModel('ROM_draft3',Optimized_DesignVars);
% end
% 
% function Vals = ROM_draft3_optFcn(P,Simulator,Requirements)
% %ROM_DRAFT3_OPTFCN
% %
% % Function called at each iteration of the optimization problem.
% %
% % The function is called with a set of parameter values, P, and returns
% % the objective value and constraint violations, Vals, to the optimization
% % solver.
% %
% % See the sdoExampleCostFunction function and sdo.optimize for a more
% % detailed description of the function signature.
% %
% 
% %% Model Evaluation
% 
% % Simulate the model.
% Simulator.Parameters = P;
% Simulator = sim(Simulator, 'Timeout', 120);
% 
% % Retrieve logged signal data.
% SimLog = find(Simulator.LoggedData,get_param('ROM_draft3','SignalLoggingName'));
% Sig_Log = find(SimLog,'Sig');
% Sig_1_Log = find(SimLog,'Sig_1');
% Sig_2_Log = find(SimLog,'Sig_2');
% 
% % Evaluate the design requirements.
% F_SignalTracking = evalRequirement(Requirements.SignalTracking,Sig_Log.Values);
% Cleq_SignalBound = evalRequirement(Requirements.SignalBound,Sig_1_Log.Values);
% Cleq_SignalBound_1 = evalRequirement(Requirements.SignalBound_1,Sig_1_Log.Values);
% Cleq_SignalBound_2 = evalRequirement(Requirements.SignalBound_2,Sig_2_Log.Values);
% Cleq_SignalBound_3 = evalRequirement(Requirements.SignalBound_3,Sig_2_Log.Values);
% 
% %% Return Values.
% %
% % Collect the evaluated design requirement values in a structure to
% % return to the optimization solver.
% Vals.F = F_SignalTracking;
% Vals.Cleq = [...
%     Cleq_SignalBound(:); ...
%     Cleq_SignalBound_1(:); ...
%     Cleq_SignalBound_2(:); ...
%     Cleq_SignalBound_3(:)];
% end


function results = try1()
% Automated optimization with different initial values for all design variables

%% Open the model
open_system('ROM_draft3');

%% Define Different Initial Values
initial_values = [0, 50, 100, 150, 200, 250]; % Values to test

%% Specify Design Variables Manually (Instead of Loading a Session)
DesignVars = sdo.getParameterFromModel('ROM_draft3', ...
    {'Left_EO', 'Left_IO', 'Left_LongThor', 'Left_MF', 'Left_Psoas', 'Left_RA'});

% Set min/max constraints
for j = 1:length(DesignVars)
    DesignVars(j).Minimum = 0;
    DesignVars(j).Maximum = 250;
end

% Store results
results = struct();

% Loop over each initial value
for i = 1:length(initial_values)
    fprintf('Running Optimization %d with Initial Value = %d for all variables\n', i, initial_values(i));

    % Set all design variables to the current initial value
    for j = 1:length(DesignVars)
        DesignVars(j).Value = initial_values(i);
    end

    %% Specify Design Requirements
    Requirements = struct;
    bnds = getbounds('ROM_draft3/Muscle Forces/Minimize SumofCubeofForces');
    Requirements.SignalTracking = bnds{1};
    bnds = getbounds('ROM_draft3/Plumbline - Check X Bounds');
    bnds = [bnds{:}];
    Requirements.SignalBound = bnds(1);
    Requirements.SignalBound_1 = bnds(2);
    bnds = getbounds('ROM_draft3/Plumbline - Check Y Bounds');
    bnds = [bnds{:}];
    Requirements.SignalBound_2 = bnds(1);
    Requirements.SignalBound_3 = bnds(2);

    % Disable check block assertions during optimization
    CheckBlockStatus = sdo.setCheckBlockEnabled('ROM_draft3', 'off');

    %% Simulation Setup
    Simulator = sdo.SimulationTest('ROM_draft3');

    % Enable fast restart
    Simulator = fastRestart(Simulator, 'on');

    %% Define Optimization Objective Function
    optimfcn = @(P) ROM_draft3_optFcn(P, Simulator, Requirements);

    %% Optimization Options
    Options = sdo.OptimizeOptions;
    Options.MethodOptions.Algorithm = 'active-set';
    Options.OptimizedModel = Simulator;

    %% Run Optimization
    [Optimized_DesignVars, Info] = sdo.optimize(optimfcn, DesignVars, Options);

    % Disable fast restart
    Simulator = fastRestart(Simulator, 'off');

    % Restore check block assertions
    sdo.setCheckBlockEnabled('ROM_draft3', CheckBlockStatus);

    %% Store Results
    results(i).InitialValue = initial_values(i);
    results(i).Optimized_DesignVars = Optimized_DesignVars;
    results(i).Info = Info;

    % Update the model with optimized parameters
    sdo.setValueInModel('ROM_draft3', Optimized_DesignVars);
end

%% Save results for later analysis
save('try1_results.mat', 'results');

fprintf('Optimization runs completed and saved.\n');

end


