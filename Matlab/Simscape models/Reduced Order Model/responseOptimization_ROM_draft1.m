function [Optimized_DesignVars,Info] = responseOptimization_ROM_draft1(DesignVars)
%RESPONSEOPTIMIZATION_ROM_DRAFT1
%
% Solve a design optimization problem for the ROM_draft1 model.
%
% The function returns optimized parameter values, Optimized_DesignVars,
% and optimization termination information, Info.
%
% The input argument, DesignVars, defines the model parameters to optimize,
% if omitted the parameters specified in the function body are optimized.
%
% Modify the function to include or exclude new design requirements, or
% to change the optimization options.
%
% Auto-generated by SDOTOOL on 08-Jun-2024 14:37:04.
%

%% Open the model.
open_system('ROM_draft1')

%% Specify Design Variables
%
% Specify model parameters as design variables to optimize.
if nargin < 1 || isempty(DesignVars)
    DesignVars = sdo.getParameterFromModel('ROM_draft1',{'E_IVD1','E_IVD3','E_IVD5','E_IVD2','E_IVD4'});
    DesignVars(1).Minimum = 1;
    DesignVars(1).Maximum = 15;
    DesignVars(1).Scale = 1;
    DesignVars(2).Minimum = 1;
    DesignVars(2).Maximum = 15;
    DesignVars(2).Scale = 1;
    DesignVars(3).Minimum = 1;
    DesignVars(3).Maximum = 15;
    DesignVars(3).Scale = 1;
    DesignVars(4).Minimum = 1;
    DesignVars(4).Maximum = 15;
    DesignVars(4).Scale = 1;
    DesignVars(5).Minimum = 1;
    DesignVars(5).Maximum = 15;
    DesignVars(5).Scale = 1;
end

%% Specify Design Requirements
%
% Specify design requirements to satisfy during optimization.
Requirements = struct;
bnds = getbounds('ROM_draft1/Check Flexion angle');
bnds = [bnds{:}];
Requirements.SignalBound = bnds(1);
Requirements.SignalBound_1 = bnds(2);
bnds = getbounds('ROM_draft1/L5-S1 Flexion');
Requirements.SignalTracking = bnds{1};

% Prevent check block assertions during optimization.
CheckBlockStatus = sdo.setCheckBlockEnabled('ROM_draft1','off');

%% Simulation Definition
%
% Specify model signals to log during model simulation.
Simulator = sdo.SimulationTest('ROM_draft1');

Sig_Info = Simulink.SimulationData.SignalLoggingInfo;
Sig_Info.BlockPath = 'ROM_draft1/Check Flexion angle/u';
Sig_Info.LoggingInfo.LoggingName = 'Sig';
Sig_Info.LoggingInfo.NameMode = 1;

Sig_1_Info = Simulink.SimulationData.SignalLoggingInfo;
Sig_1_Info.BlockPath = 'ROM_draft1/L5-S1 Flexion/u';
Sig_1_Info.LoggingInfo.LoggingName = 'Sig_1';
Sig_1_Info.LoggingInfo.NameMode = 1;

Simulator.LoggingInfo.Signals = [...
    Sig_Info; ...
    Sig_1_Info];

%% Create Optimization Objective Function
%
% Create a function that is called at each optimization iteration
% to evaluate the design requirements.
%
% Use an anonymous function with one argument that calls ROM_draft1_optFcn.
optimfcn = @(P) ROM_draft1_optFcn(P,Simulator,Requirements);

%% Optimization Options
%
% Specify optimization options.
% Options = sdo.OptimizeOptions;
% Options.Method = 'surrogateopt';
% Options.MethodOptions.MaxFunctionEvaluations = 1000;
% Options.MethodOptions.ObjectiveLimit = 0.001;
% Options.OptimizedModel = Simulator;

 gaOptions = optimoptions('ga');
 gaOptions.PopulationSize = 100;
 gaOptions.MaxGenerations = 1000;
 gaOptions.CrossoverFraction = 0.8;
 gaOptions.MutationFcn = @mutationadaptfeasible;


Options = sdo.OptimizeOptions;
Options.Method = 'ga';
Options.MethodOptions = gaOptions;
Options.OptimizedModel = Simulator;


%% Optimize the Design
%
% Call sdo.optimize with the objective function handle, parameters to
% optimize, and options.
[Optimized_DesignVars,Info] = sdo.optimize(optimfcn,DesignVars,Options);

% Restore check block assertions.
sdo.setCheckBlockEnabled('ROM_draft1',CheckBlockStatus);

%% Update Model
%
% Update the model with the optimized parameter values.
sdo.setValueInModel('ROM_draft1',Optimized_DesignVars);
end

function Vals = ROM_draft1_optFcn(P,Simulator,Requirements)
%ROM_DRAFT1_OPTFCN
%
% Function called at each iteration of the optimization problem.
%
% The function is called with a set of parameter values, P, and returns
% the objective value and constraint violations, Vals, to the optimization
% solver.
%
% See the sdoExampleCostFunction function and sdo.optimize for a more
% detailed description of the function signature.
%

%% Model Evaluation

% Simulate the model.
Simulator.Parameters = P;
Simulator = sim(Simulator);

% Retrieve logged signal data.
SimLog = find(Simulator.LoggedData,get_param('ROM_draft1','SignalLoggingName'));
Sig_Log = find(SimLog,'Sig');
Sig_1_Log = find(SimLog,'Sig_1');

% Evaluate the design requirements.
F_SignalTracking = evalRequirement(Requirements.SignalTracking,Sig_1_Log.Values);
Cleq_SignalBound = evalRequirement(Requirements.SignalBound,Sig_Log.Values);
Cleq_SignalBound_1 = evalRequirement(Requirements.SignalBound_1,Sig_Log.Values);

%% Return Values.
%
% Collect the evaluated design requirement values in a structure to
% return to the optimization solver.
Vals.F = F_SignalTracking;
Vals.Cleq = [...
    Cleq_SignalBound(:); ...
    Cleq_SignalBound_1(:)];
end
