function [Optimized_DesignVars,Info] = responseOptimizationDraft7(DesignVars)
%  -----------------------------------------

% Use this to solve muscle solutions for flexion 50 degrees, and calculate L3 extensor torque manually for required IAP 
% -------------------------------
% Solve a design optimization problem for the draft7 model.
%
% The function returns optimized parameter values, Optimized_DesignVars,
% and optimization termination information, Info.
%
% The input argument, DesignVars, defines the model parameters to optimize,
% if omitted the parameters specified in the function body are optimized.
%
% Modify the function to include or exclude new design requirements, or
% to change the optimization options.
%
% Auto-generated by SDOTOOL on 13-May-2024 18:28:58.
%

%% Open the model.
open_system('draft7')

%% Specify Design Variables
%
% Specify model parameters as design variables to optimize.
if nargin < 1 || isempty(DesignVars)
    DesignVars = sdo.getParameterFromModel('draft7',{'LeftAbdominalMuscleForce','LeftBackMuscleForce','LeftTransverse1MuscleForce','LeftTransverse2MuscleForce','RightAbdominalMuscleForce','RightBackMuscleForce','RightTransverse1MuscleForce','RightTransverse2MuscleForce'});
    DesignVars(1).Minimum = 1;
    DesignVars(1).Maximum = 500;
    DesignVars(1).Scale = 1;
    DesignVars(2).Minimum = 20;
    DesignVars(2).Maximum = 500;
    DesignVars(2).Scale = 1;
    DesignVars(3).Minimum = 1;
    DesignVars(3).Maximum = 500;
    DesignVars(3).Scale = 1;
    DesignVars(4).Minimum = 1;
    DesignVars(4).Maximum = 500;
    DesignVars(4).Scale = 1;
    
    DesignVars(5).Minimum = 1;
    DesignVars(5).Maximum = 500;
    DesignVars(5).Scale = 1;

    DesignVars(6).Minimum = 1;
    DesignVars(6).Maximum = 500;
    DesignVars(6).Scale = 1;

    DesignVars(7).Minimum = 1;
    DesignVars(7).Maximum = 500;
    DesignVars(7).Scale = 1;

    DesignVars(8).Minimum = 1;
    DesignVars(8).Maximum = 500;
    DesignVars(8).Scale = 1;

    DesignVars(1).Value = DesignVars(1).Maximum * rand()
    DesignVars(2).Value = DesignVars(2).Maximum * rand()
    DesignVars(3).Value = DesignVars(3).Maximum * rand()
    DesignVars(4).Value = DesignVars(4).Maximum * rand()

    DesignVars(5).Value = DesignVars(5).Maximum * rand()
    DesignVars(6).Value = DesignVars(6).Maximum * rand()
    DesignVars(7).Value = DesignVars(7).Maximum * rand()
    DesignVars(8).Value = DesignVars(8).Maximum * rand()
end

%% Specify Design Requirements
%
% Specify design requirements to satisfy during optimization.
Requirements = struct;
bnds = getbounds('draft7/Check Flexion Angle');
bnds = [bnds{:}];
Requirements.SignalBound = bnds(1);
Requirements.SignalBound_1 = bnds(2);
bnds = getbounds('draft7/Check X Bounds');
bnds = [bnds{:}];
Requirements.SignalBound_2 = bnds(1);
Requirements.SignalBound_3 = bnds(2);

% Prevent check block assertions during optimization.
CheckBlockStatus = sdo.setCheckBlockEnabled('draft7','off');

%% Simulation Definition
%
% Specify model signals to log during model simulation.
Simulator = sdo.SimulationTest('draft7');

Sig_Info = Simulink.SimulationData.SignalLoggingInfo;
Sig_Info.BlockPath = 'draft7/Check Flexion Angle/u';
Sig_Info.LoggingInfo.LoggingName = 'Sig';
Sig_Info.LoggingInfo.NameMode = 1;

Sig_1_Info = Simulink.SimulationData.SignalLoggingInfo;
Sig_1_Info.BlockPath = 'draft7/Check X Bounds/u';
Sig_1_Info.LoggingInfo.LoggingName = 'Sig_1';
Sig_1_Info.LoggingInfo.NameMode = 1;

Simulator.LoggingInfo.Signals = [...
    Sig_Info; ...
    Sig_1_Info];

%%
% Configure the simulator for fast restart
Simulator = fastRestart(Simulator,'on');

%% Create Optimization Objective Function
%
% Create a function that is called at each optimization iteration
% to evaluate the design requirements.
%
% Use an anonymous function with one argument that calls draft7_optFcn.
optimfcn = @(P) draft7_optFcn(P,Simulator,Requirements);

%% Optimization Options
%
% Specify optimization options.
Options = sdo.OptimizeOptions;
Options.Method = 'fmincon';
Options.MethodOptions.FunctionTolerance = 0.005;
Options.OptimizedModel = Simulator;

%% Optimize the Design
%
% Call sdo.optimize with the objective function handle, parameters to
% optimize, and options.
[Optimized_DesignVars,Info] = sdo.optimize(optimfcn,DesignVars,Options);

%%
% Restore the simulator fast restart settings
Simulator = fastRestart(Simulator,'off');

% Restore check block assertions.
sdo.setCheckBlockEnabled('draft7',CheckBlockStatus);

%% Update Model
%
% Update the model with the optimized parameter values.
sdo.setValueInModel('draft7',Optimized_DesignVars);
end

function Vals = draft7_optFcn(P,Simulator,Requirements)
%DRAFT7_OPTFCN
%
% Function called at each iteration of the optimization problem.
%
% The function is called with a set of parameter values, P, and returns
% the objective value and constraint violations, Vals, to the optimization
% solver.
%
% See the sdoExampleCostFunction function and sdo.optimize for a more
% detailed description of the function signature.
%

%% Model Evaluation

% Simulate the model.
Simulator.Parameters = P;
Simulator = sim(Simulator);

% Retrieve logged signal data.
SimLog = find(Simulator.LoggedData,get_param('draft7','SignalLoggingName'));
Sig_Log = find(SimLog,'Sig');
Sig_1_Log = find(SimLog,'Sig_1');

% Evaluate the design requirements.
Cleq_SignalBound = evalRequirement(Requirements.SignalBound,Sig_Log.Values);
Cleq_SignalBound_1 = evalRequirement(Requirements.SignalBound_1,Sig_Log.Values);
Cleq_SignalBound_2 = evalRequirement(Requirements.SignalBound_2,Sig_1_Log.Values);
Cleq_SignalBound_3 = evalRequirement(Requirements.SignalBound_3,Sig_1_Log.Values);

%% Return Values.
%
% Collect the evaluated design requirement values in a structure to
% return to the optimization solver.
Vals.Cleq = [...
    Cleq_SignalBound(:); ...
    Cleq_SignalBound_1(:); ...
    Cleq_SignalBound_2(:); ...
    Cleq_SignalBound_3(:)];
end
